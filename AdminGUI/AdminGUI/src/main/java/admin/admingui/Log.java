package admin.admingui;

import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
/**
 * @author justin Storms
 * @version 1.0 - Log.java
 * @since 5/26/2023
 * Class which enforces user accountability on Admin database access through AdminUI. Logs built here are output to an
 * activity file.
 */

/**
 * Activity code list:
 */
enum Activity {
    PUD,    //Pull User Details
    PCID,   //Pull Contact IDs
    DUA,    //Delete User Account
    PPic,   //Pull Picture
    PPost,  //Pull Post
    DPic,   //Delete Picture
    DPost,  //Delete Post
    PPicC,  //Pull Picture Comment
    PPostC, //Pull Post Comment
    QRY,    //Export Query
    DPicC,  //Delete Picture Comment
    DPostC  //Delete Post Comment
}

/**
 * Log class which defines the log output details using passed parameters based on the operation performed by the
 * Admin User.
 */
public class Log {
    //private data members
    private String userName, personID, postID, commentID, activity, date;
    private int logID;

    //Class base constructor

    /**
     * Class base constructor. Holds data to log events captured during admin processes
     * @param userName Admin username accessing data via UI.
     */
    public Log(String userName){
        this.userName = userName;
        this.personID = "";
        this.postID = "";
        this.commentID = "";
        this.activity = "";
        this.date = "";
        this.logID = 0; //base log
    }

    /**
     * Class copy-constructor, which takes the details form a base Log object and captures the current activity.
     * Handles Pull requests for PicMe user details and contact IDs.
     * @param log Base constructor generated by admin user activity.
     * @param activity Activity type being processed.
     */
    public Log(Log log, Enum<Activity> activity, String personID){
        LocalDateTime now;
        DateTimeFormatter dtf;
        Activity act = (Activity) activity;
        switch(act) {
            case PUD: //Constructor for AdminController.pullUserDetails
                this.userName = log.getUserName();
                this.personID = personID;
                this.postID = "";
                this.commentID = "";
                this.activity = "Pull User Details.";
                now = LocalDateTime.now();
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            case PCID: //Constructor for AdminController.pullContactIDs
                this.userName = log.getUserName();
                this.personID = log.getPersonID();
                this.postID = "";
                this.commentID = "";
                this.activity = "Pull Contact IDs from PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
            case DUA: //Constructor for AdminController.deleteUser
                this.userName = log.getUserName();
                this.personID = log.getPersonID();
                this.postID = "";
                this.commentID = "";
                this.activity = "Delete PMUser Account.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
            default:
                break;
        }
    }

    /**
     * Class copy-constructor, which takes the details form a base Log object and captures the current activity.
     * Handles Pull/Delete requests for PicMe user pictures and posts.
     * @param log Base constructor generated by admin user activity.
     * @param ID ID of the post or picture queried.
     * @param activity Activity type being processed.
     */
    public Log(Log log, String ID, Enum<Activity> activity, String personID){
        LocalDateTime now;
        DateTimeFormatter dtf;
        Activity act = (Activity) activity;
        switch(act) {
            case PPic: //Constructor for AdminController.pullPicture
                this.userName = log.getUserName();
                this.personID = personID;
                this.postID = ID;
                this.commentID = "";
                this.activity = "Pull Picture from PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            case PPost: //Constructor for AdminController.pullPost
                this.userName = log.getUserName();
                this.personID = log.getPersonID();
                this.postID = ID;
                this.commentID = "";
                this.activity = "Pull Post from PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            case DPic: //Constructor for AdminController.deletePicture
                this.userName = log.getUserName();
                this.personID = log.getPersonID();
                this.postID = ID;
                this.commentID = "";
                this.activity = "Delete Picture from PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            case DPost: //Constructor for AdminController.deletePost
                this.userName = log.getUserName();
                this.personID = log.getPersonID();
                this.postID = ID;
                this.commentID = "";
                this.activity = "Delete Post from PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            default:
                break;
        }
    }

    /**
     * Class copy-constructor, which takes the details form a base Log object and captures the current activity.
     * Handles Pull/Delete requests for PicMe user picture comments and post comments, as well as query exports.
     * @param log Base constructor generated by admin user activity.
     * @param ID ID of the post or picture queried.
     * @param cID ID of the comment queried.
     * @param activity Activity type being processed.
     */
    public Log(Log log, String ID, String cID, Enum<Activity> activity, String personID){
        LocalDateTime now;
        DateTimeFormatter dtf;
        Activity act = (Activity) activity;
        switch(act) {
            case PPicC: //Constructor for AdminController.pullPictureComments
                this.userName = log.getUserName();
                this.personID = personID;
                this.postID = ID;
                this.commentID = cID;
                this.activity = "Pull Picture Comments from PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            case PPostC: //Constructor for AdminController.pullPostComments
                this.userName = log.getUserName();
                this.personID = log.getPersonID();
                this.postID = ID;
                this.commentID = cID;
                this.activity = "Pull Post Comments from PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            case QRY: //Constructor for AdminController.exportQueryAsFile
                this.userName = log.getUserName();
                this.personID = log.getPersonID();
                this.postID = ID;
                this.commentID = cID;
                this.activity = "Query Export requested for PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            case DPicC: //Constructor for AdminController.deletePictureComment
                this.userName = log.getUserName();
                this.personID = log.getPersonID();
                this.postID = ID;
                this.commentID = cID;
                this.activity = "Delete Picture Comment from PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            case DPostC: //Constructor for AdminController.deletePostComment
                this.userName = log.getUserName();
                this.personID = log.getPersonID();
                this.postID = ID;
                this.commentID = cID;
                this.activity = "Delete Post Comment from PMUser.";
                dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                now = LocalDateTime.now();
                this.date = dtf.format(now);
                this.logID = log.getLogID() + 1;
                break;
            default:
                break;
        }
    }

    /**
     * Method which formats output used when writing logs to file.
     * @return String of log details.
     */
    public String toString(){
        return this.date +
                "\nLogID: " + this.getLogID() +
                "\nUsername: " + this.getUserName() +
                "\nRequest type: " + this.getActivity() +
                "\n\tRequest made on PMUserID: " + this.getPersonID() +
                "\n\tPostID: " + this.getPostID() +
                "\n\tCommentID: " + this.getCommentID() + "\n********************\n\n";
    }

    /**
     * Getter method which returns the Admin username.
     * @return String of userName.
     */
    public String getUserName() {
        return userName;
    }

    /**
     * Getter method which returns the PMUserID.
     * @return String of personID.
     */
    public String getPersonID() {
        return personID;
    }

    /**
     * Getter method which returns the PicMe postID.
     * @return String of postID.
     */
    public String getPostID() {
        return postID;
    }

    /**
     * Getter method which returns the PicMe commentID.
     * @return String of postID.
     */
    public String getCommentID() {
        return commentID;
    }

    /**
     * Getter method which returns the Admin activity.
     * @return String of activity.
     */
    public String getActivity() {
        return activity;
    }

    /**
     * Getter method which returns the date of Admin activity
     * occurrence.
     * @return String of date.
     */
    public String getDate() {
        return date;
    }

    /**
     * Getter method which returns the current log ID.
     * @return int of logID.
     */
    public int getLogID() {
        return logID;
    }
}
